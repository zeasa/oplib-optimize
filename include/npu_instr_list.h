#ifndef _MANASI_ASM_INSTR_LIST_H__
#define _MANASI_ASM_INSTR_LIST_H__

#include "npu_reg_def.h"
#include "npu_instr_gen.h"
#include "npu_instr_encode.h"

#define vadd_vs(  vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2 ".long " TOSTR(encode_vadd_vs(  vrd, vrs1, REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vadd_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(           ".long " TOSTR(encode_vadd_vv(  vrd, vrs1, vrs2, msk_idx, sh_idx)) )
#define vaddc_vs( vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2 ".long " TOSTR(encode_vaddc_vs( vrd, vrs1, REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vaddc_vv( vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(           ".long " TOSTR(encode_vaddc_vv( vrd, vrs1, vrs2, msk_idx, sh_idx)) )
#define vsub_vs(  vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2 ".long " TOSTR(encode_vsub_vs(  vrd, vrs1, REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vsub_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(           ".long " TOSTR(encode_vsub_vv(  vrd, vrs1, vrs2, msk_idx, sh_idx)) )
#define vsubc_vs( vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2 ".long " TOSTR(encode_vsubc_vs( vrd, vrs1, REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vsubc_vv( vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(           ".long " TOSTR(encode_vsubc_vv( vrd, vrs1, vrs2, msk_idx, sh_idx)) )
#define vrsub_vs( vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2 ".long " TOSTR(encode_vrsub_vs( vrd, vrs1, REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vrsub_vv( vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(           ".long " TOSTR(encode_vrsub_vv( vrd, vrs1, vrs2, msk_idx, sh_idx)) )
#define vrsubc_vs(vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2 ".long " TOSTR(encode_vrsubc_vs(vrd, vrs1, REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vrsubc_vv(vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(           ".long " TOSTR(encode_vrsubc_vv(vrd, vrs1, vrs2, msk_idx, sh_idx)) )

#define vge_vs(   vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vge_vs(   vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vge_vv(   vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vge_vv(   vrd, vrs1,vrs2, msk_idx, sh_idx)) )
#define vgeu_vs(  vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vgeu_vs(  vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vgeu_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vgeu_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)) )
#define vlt_vs(   vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vlt_vs(   vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vlt_vv(   vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vlt_vv(   vrd, vrs1,vrs2, msk_idx, sh_idx)) )
#define vltu_vs(  vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vltu_vs(  vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vltu_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vltu_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)) )
                                                                                  
#define vand_vs(  vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vand_vs(  vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vand_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vand_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)) )
#define vor_vs(   vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vor_vs(   vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vor_vv(   vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vor_vv(   vrd, vrs1,vrs2, msk_idx, sh_idx)) )
#define vxor_vs(  vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vxor_vs(  vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vxor_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vxor_vv(  vrd, vrs1,vrs2, msk_idx, sh_idx)) )
#define vnxor_vs( vrd, vrs1,var2, msk_idx, sh_idx)       asm volatile( COPY_VAR2  ".long " TOSTR(encode_vnxor_vs( vrd, vrs1,REG2, msk_idx, sh_idx)) COPY_VAR2_END(var2) )
#define vnxor_vv( vrd, vrs1,vrs2, msk_idx, sh_idx)       asm volatile(            ".long " TOSTR(encode_vnxor_vv( vrd, vrs1,vrs2, msk_idx, sh_idx)) )
                                                                                  
#define vmand(   vmrd, vmrs1, vmrs2, msk_idx, sh_idx)    asm volatile(            ".long " TOSTR(encode_vmand(   vmrd, vmrs1, vmrs2, msk_idx, sh_idx)) )
#define vmor(    vmrd, vmrs1, vmrs2, msk_idx, sh_idx)    asm volatile(            ".long " TOSTR(encode_vmor(    vmrd, vmrs1, vmrs2, msk_idx, sh_idx)) )
#define vmxor(   vmrd, vmrs1, vmrs2, msk_idx, sh_idx)    asm volatile(            ".long " TOSTR(encode_vmxor(   vmrd, vmrs1, vmrs2, msk_idx, sh_idx)) )
#define vmnxor(  vmrd, vmrs1, vmrs2, msk_idx, sh_idx)    asm volatile(            ".long " TOSTR(encode_vmnxor(  vmrd, vmrs1, vmrs2, msk_idx, sh_idx)) )
                                                                                  
#define vsrl_vs(vrd, vrs1,var2,       msk_idx)           asm volatile( COPY_VAR2  ".long " TOSTR(encode_vsrl_vs(vrd, vrs1,REG2,       msk_idx)) COPY_VAR2_END(var2) )
#define vsrl_vv(vrd, vrs1,vrs2,       msk_idx)           asm volatile(            ".long " TOSTR(encode_vsrl_vv(vrd, vrs1,vrs2,       msk_idx)) )
#define vsra_vs(vrd, vrs1,var2,       msk_idx)           asm volatile( COPY_VAR2  ".long " TOSTR(encode_vsra_vs(vrd, vrs1,REG2,       msk_idx)) COPY_VAR2_END(var2) )
#define vsra_vv(vrd, vrs1,vrs2,       msk_idx)           asm volatile(            ".long " TOSTR(encode_vsra_vv(vrd, vrs1,vrs2,       msk_idx)) )
#define vsrc_vs(vrd, vrs1,var2,       msk_idx)           asm volatile( COPY_VAR2  ".long " TOSTR(encode_vsrc_vs(vrd, vrs1,REG2,       msk_idx)) COPY_VAR2_END(var2) )
#define vsrc_vv(vrd, vrs1,vrs2,       msk_idx)           asm volatile(            ".long " TOSTR(encode_vsrc_vv(vrd, vrs1,vrs2,       msk_idx)) )
#define vsrs_vs(vrd, vrs1,var2,       msk_idx)           asm volatile( COPY_VAR2  ".long " TOSTR(encode_vsrs_vs(vrd, vrs1,REG2,       msk_idx)) COPY_VAR2_END(var2) )
#define vsrs_vv(vrd, vrs1,vrs2,       msk_idx)           asm volatile(            ".long " TOSTR(encode_vsrs_vv(vrd, vrs1,vrs2,       msk_idx)) )
#define vsrl_vi(vrd, vrs1,     imm_5, msk_idx)           asm volatile(            ".long " TOSTR(encode_vsrl_vi(vrd, vrs1,     imm_5, msk_idx)) )
#define vsra_vi(vrd, vrs1,     imm_5, msk_idx)           asm volatile(            ".long " TOSTR(encode_vsra_vi(vrd, vrs1,     imm_5, msk_idx)) )
#define vsrc_vi(vrd, vrs1,     imm_5, msk_idx)           asm volatile(            ".long " TOSTR(encode_vsrc_vi(vrd, vrs1,     imm_5, msk_idx)) )
#define vsrs_vi(vrd, vrs1,     imm_5, msk_idx)           asm volatile(            ".long " TOSTR(encode_vsrs_vi(vrd, vrs1,     imm_5, msk_idx)) )
#define vsl_vs( vrd, vrs1,var2,       msk_idx)           asm volatile( COPY_VAR2  ".long " TOSTR(encode_vsl_vs( vrd, vrs1,REG2,       msk_idx)) COPY_VAR2_END(var2) )
#define vsl_vv( vrd, vrs1,vrs2,       msk_idx)           asm volatile(            ".long " TOSTR(encode_vsl_vv( vrd, vrs1,vrs2,       msk_idx)) )
#define vsl_vi( vrd, vrs1,var2,imm_5, msk_idx)           asm volatile( COPY_VAR2  ".long " TOSTR(encode_vsl_vi( vrd, vrs1,REG2,imm_5, msk_idx)) COPY_VAR2_END(var2) )
                                                                                  
#define vmulu_vs( vrd, vrs1,var2, msk_idx)               asm volatile( COPY_VAR2  ".long " TOSTR(encode_vmulu_vs( vrd, vrs1,REG2, msk_idx)) COPY_VAR2_END(var2) )
#define vmulu_vv( vrd, vrs1,vrs2, msk_idx)               asm volatile(            ".long " TOSTR(encode_vmulu_vv( vrd, vrs1,vrs2, msk_idx)) )
#define vmulus_vs(vrd, vrs1,var2, msk_idx)               asm volatile( COPY_VAR2  ".long " TOSTR(encode_vmulus_vs(vrd, vrs1,REG2, msk_idx)) COPY_VAR2_END(var2) )
#define vmulus_vv(vrd, vrs1,vrs2, msk_idx)               asm volatile(            ".long " TOSTR(encode_vmulus_vv(vrd, vrs1,vrs2, msk_idx)) )
#define vmulsu_vs(vrd, vrs1,var2, msk_idx)               asm volatile( COPY_VAR2  ".long " TOSTR(encode_vmulsu_vs(vrd, vrs1,REG2, msk_idx)) COPY_VAR2_END(var2) )
#define vmulsu_vv(vrd, vrs1,vrs2, msk_idx)               asm volatile(            ".long " TOSTR(encode_vmulsu_vv(vrd, vrs1,vrs2, msk_idx)) )
#define vmul_vs(  vrd, vrs1,var2, msk_idx)               asm volatile( COPY_VAR2  ".long " TOSTR(encode_vmul_vs(  vrd, vrs1,REG2, msk_idx)) COPY_VAR2_END(var2) )
#define vmul_vv(  vrd, vrs1,vrs2, msk_idx)               asm volatile(            ".long " TOSTR(encode_vmul_vv(  vrd, vrs1,vrs2, msk_idx)) )
                                                                                  
#define valign_h(    vrd, vrs1,var2, msk_idx)            asm volatile( COPY_VAR2  ".long " TOSTR(encode_valign_h(    vrd, vrs1,REG2, msk_idx)) COPY_VAR2_END(var2) )
#define valign_v(    vrd, vrs1,vrs2, msk_idx)            asm volatile(            ".long " TOSTR(encode_valign_v(    vrd, vrs1,vrs2, msk_idx)) )
#define valign_cross(vrd, vrs1,var2, msk_idx)            asm volatile( COPY_VAR2  ".long " TOSTR(encode_valign_cross(vrd, vrs1,REG2, msk_idx)) COPY_VAR2_END(var2) )
#define vsel(        vrd, vrs1,vrs2, sel_idx)            asm volatile(            ".long " TOSTR(encode_vsel(        vrd, vrs1,vrs2, sel_idx)) )
#define vargsort(    vrd, vrs1,var2, msk_idx)            asm volatile( COPY_VAR2  ".long " TOSTR(encode_vargsort(    vrd, vrs1,REG2, msk_idx)) COPY_VAR2_END(var2) )
#define vreorder(    vrd, vrs1,vrs2, msk_idx)            asm volatile(            ".long " TOSTR(encode_vreorder(    vrd, vrs1,vrs2, msk_idx)) )
#define vtranspose(  vrd, vrs1,      msk_idx)            asm volatile(            ".long " TOSTR(encode_vtranspose(  vrd, vrs1,      msk_idx)) )
                                                                                  
#define vrmax(vmrd, vrs1, sel_idx)                       asm volatile(            ".long " TOSTR(encode_vrmax(vmrd, vrs1, sel_idx)) )
#define vrmin(vmrd, vrs1, sel_idx)                       asm volatile(            ".long " TOSTR(encode_vrmin(vmrd, vrs1, sel_idx)) )
#define vrsum(vrd, vrs1, sel_idx)                        asm volatile(            ".long " TOSTR(encode_vrsum(vrd, vrs1, sel_idx)) )
#define vrcompress(vrd, vrs1, sel_idx)                   asm volatile(            ".long " TOSTR(encode_vrcompress(vrd, vrs1, sel_idx)) )
                                                                                  
#define vfadd( vrd, vrs1, vrs2, msk_idx)                 asm volatile(            ".long " TOSTR(encode_vfadd( vrd, vrs1, vrs2, msk_idx)) )
#define vfsub( vrd, vrs1, vrs2, msk_idx)                 asm volatile(            ".long " TOSTR(encode_vfsub( vrd, vrs1, vrs2, msk_idx)) )
#define vfmul( vrd, vrs1, vrs2, msk_idx)                 asm volatile(            ".long " TOSTR(encode_vfmul( vrd, vrs1, vrs2, msk_idx)) )
#define vfsort(vrd, vrs1, var2, msk_idx)                 asm volatile( COPY_VAR2  ".long " TOSTR(encode_vfsort(vrd, vrs1, REG2, msk_idx)) COPY_VAR2_END(var2) )
#define vftoi( vrd, vrs1,       msk_idx)                 asm volatile(            ".long " TOSTR(encode_vftoi( vrd, vrs1,       msk_idx)) )
#define vitof( vrd, vrs1,       msk_idx)                 asm volatile(            ".long " TOSTR(encode_vitof( vrd, vrs1,       msk_idx)) )
                                                                                  
#define vlog2(vrd, vrs1,       msk_idx)                  asm volatile(            ".long " TOSTR(encode_vlog2(vrd, vrs1,       msk_idx)) )
#define vexp2(vrd, vrs1,       msk_idx)                  asm volatile(            ".long " TOSTR(encode_vexp2(vrd, vrs1,       msk_idx)) )
#define vrcp( vrd, vrs1,       msk_idx)                  asm volatile(            ".long " TOSTR(encode_vrcp( vrd, vrs1,       msk_idx)) )
#define vsqrt(vrd, vrs1,       msk_idx)                  asm volatile(            ".long " TOSTR(encode_vsqrt(vrd, vrs1,       msk_idx)) )
                                                                                  
#define vlb( vrd,var1, imm_8)                            asm volatile( COPY_VAR1  ".long " TOSTR(encode_vlb( vrd,REG1, imm_8)) COPY_VAR1_END(var1) )
#define vlbu(vrd,var1, imm_8)                            asm volatile( COPY_VAR1  ".long " TOSTR(encode_vlbu(vrd,REG1, imm_8)) COPY_VAR1_END(var1) )
#define vlh( vrd,var1, imm_8)                            asm volatile( COPY_VAR1  ".long " TOSTR(encode_vlh( vrd,REG1, imm_8)) COPY_VAR1_END(var1) )
#define vlhu(vrd,var1, imm_8)                            asm volatile( COPY_VAR1  ".long " TOSTR(encode_vlhu(vrd,REG1, imm_8)) COPY_VAR1_END(var1) )
#define vlw( vrd,var1, imm_8)                            asm volatile( COPY_VAR1  ".long " TOSTR(encode_vlw( vrd,REG1, imm_8)) COPY_VAR1_END(var1) )
#define vlf( vrd,var1, imm_8)                            asm volatile( COPY_VAR1  ".long " TOSTR(encode_vlf( vrd,REG1, imm_8)) COPY_VAR1_END(var1) )
                                                                                  
#define vsb(var1, vrs2, imm_8)                           asm volatile( COPY_VAR1  ".long " TOSTR(encode_vsb(REG1,vrs2, imm_8)) COPY_VAR1_END(var1) )
#define vsh(var1, vrs2, imm_8)                           asm volatile( COPY_VAR1  ".long " TOSTR(encode_vsh(REG1,vrs2, imm_8)) COPY_VAR1_END(var1) )
#define vsw(var1, vrs2, imm_8)                           asm volatile( COPY_VAR1  ".long " TOSTR(encode_vsw(REG1,vrs2, imm_8)) COPY_VAR1_END(var1) )
#define vsf(var1, vrs2, imm_8)                           asm volatile( COPY_VAR1  ".long " TOSTR(encode_vsf(REG1,vrs2, imm_8)) COPY_VAR1_END(var1) )
                                                                                  
#define vsset_s(vsrd,var1, var2)                         asm volatile( COPY_VAR12 ".long " TOSTR(encode_vsset_s(vsrd,REG1, REG2))       COPY_VAR12_END(var1,var2) )
#define vsset_i(vsrd, imm1_7, imm2_7)                    asm volatile(            ".long " TOSTR(encode_vsset_i(vsrd, imm1_7, imm2_7)) )
#define vfusion_s(var1,sat_5, su, rnd)                   asm volatile( COPY_VAR1  ".long " TOSTR(encode_vfusion_s(REG1,sat_5, su, rnd)) COPY_VAR1_END(var1) )
#define vfusion_v(vrs, sat_5, su, rnd)                   asm volatile(            ".long " TOSTR(encode_vfusion_v(vrs, sat_5, su, rnd)) )
#define vloop_start(imm_18)                              asm volatile(            ".long " TOSTR(encode_vloop_start(imm_18)) )
#define vloop_end(imm_4)                                 asm volatile(            ".long " TOSTR(encode_vloop_end(imm_4)) )

#define mad(    vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_mad(    vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define madc(   vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_madc(   vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define mmad(   vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_mmad(   vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define mmadc(  vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_mmadc(  vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define mvmad(  vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_mvmad(  vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define mvmadc( vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_mvmadc( vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define mvbmad( vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_mvbmad( vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define mvbmadc(vbrd,var1,var2, pt_idx)                  asm volatile( COPY_VAR12 ".long " TOSTR(encode_mvbmadc(vbrd,REG1,REG2, pt_idx))         COPY_VAR12_END(var1,var2) )
#define mcmad(  vbrd,var1,var2, pt_idx, fm2_en)          asm volatile( COPY_VAR12 ".long " TOSTR(encode_mcmad(  vbrd,REG1,REG2, pt_idx, fm2_en)) COPY_VAR12_END(var1,var2) )
#define mcmadc( vbrd,var1,var2, pt_idx, fm2_en)          asm volatile( COPY_VAR12 ".long " TOSTR(encode_mcmadc( vbrd,REG1,REG2, pt_idx, fm2_en)) COPY_VAR12_END(var1,var2) )
#define mx(     vbrd,var1,var2, pt_idx, fm2_en)          asm volatile( COPY_VAR12 ".long " TOSTR(encode_mx(     vbrd,REG1,REG2, pt_idx, fm2_en)) COPY_VAR12_END(var1,var2) )
#define mxc(    vbrd,var1,var2, pt_idx, fm2_en)          asm volatile( COPY_VAR12 ".long " TOSTR(encode_mxc(    vbrd,REG1,REG2, pt_idx, fm2_en)) COPY_VAR12_END(var1,var2) )
#define mi(     vbrd,var1,var2, pt_idx, fm2_en)          asm volatile( COPY_VAR12 ".long " TOSTR(encode_mi(     vbrd,REG1,REG2, pt_idx, fm2_en)) COPY_VAR12_END(var1,var2) )
#define mic(    vbrd,var1,var2, pt_idx, fm2_en)          asm volatile( COPY_VAR12 ".long " TOSTR(encode_mic(    vbrd,REG1,REG2, pt_idx, fm2_en)) COPY_VAR12_END(var1,var2) )

#define barrier( var1)                                   asm volatile( COPY_VAR1  ".long " TOSTR(encode_barrier(REG1))  COPY_VAR1_END(var1)       )
#define buf_push(imm_pnum, pt_idx)                       asm volatile(            ".long " TOSTR(encode_buf_push(imm_pnum, pt_idx))               )
#define buf_pop( vrd)                                    asm volatile(            ".long " TOSTR(encode_buf_pop(vrd))                             )
#define idep_set(immd_5, imm1_5, imm2_5, imm3_5)         asm volatile(            ".long " TOSTR(encode_idep_set(immd_5, imm1_5, imm2_5, imm3_5)) )
#define idep_rls()                                       asm volatile(            ".long " TOSTR(encode_idep_rls())                               )
#define ddep_set(immd_5, imm1_5, imm2_5, imm3_5)         asm volatile(            ".long " TOSTR(encode_ddep_set(immd_5, imm1_5, imm2_5, imm3_5)) )
#define ddep_rls()                                       asm volatile(            ".long " TOSTR(encode_ddep_rls())                               )

#endif /*_MANASI_ASM_INSTR_LIST_H__*/
